<%- include("../layouts/header.ejs") %>

<div class="container mt-4">
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Manage Users</h3>
    <span>
      <button
        class="btn btn-primary"
        data-bs-toggle="modal"
        data-bs-target="#addUserModal"
      >
        Add User
      </button>
      <form action="/admin/logout" method="GET" style="display: inline">
        <button type="submit" class="btn btn-danger">Logout</button>
      </form></span
    >
  </div>

  <input
    type="text"
    id="searchInput"
    class="form-control mb-3"
    placeholder="Search by name or email..."
  />

  <table class="table table-bordered">
    <thead class="table-dark">
      <tr>
        <th>Name</th>
        <th>Email</th>
        <th>Mobile</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody id="userTable">
      <% users.forEach(user => { %>
      <tr data-user-id="<%= user._id %>">
        <td><%= user.name %></td>
        <td><%= user.email %></td>
        <td><%= user.mobile %></td>
        <td>
          <button
            class="btn btn-warning btn-sm edit-user-btn"
            data-user="<%= JSON.stringify(user) %>"
            data-bs-toggle="modal"
            data-bs-target="#editUserModal"
          >
            Edit
          </button>
          <button
            class="btn btn-danger btn-sm delete-user-btn"
            data-user-id="<%= user._id %>"
          >
            Delete
          </button>
        </td>
      </tr>
      <% }); %>
    </tbody>
  </table>
</div>

<!-- Add User Modal -->
<div
  class="modal fade"
  id="addUserModal"
  tabindex="-1"
  aria-labelledby="addUserModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addUserModalLabel">Add New User</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <form id="addUserForm">
          <div class="mb-3">
            <label class="form-label">Name</label>
            <input type="text" class="form-control" name="name" required />
          </div>
          <div class="mb-3">
            <label class="form-label">Email</label>
            <input
              type="email"
              class="form-control"
              name="email"
              autocomplete="email"
              required
            />
          </div>
          <div class="mb-3">
            <label class="form-label">Mobile</label>
            <input
              type="text"
              class="form-control"
              name="mobile"
              autocomplete="mobile"
              required
            />
          </div>
          <div class="mb-3">
            <label class="form-label">Password</label>
            <input
              type="password"
              class="form-control"
              name="password"
              autocomplete="current-password"
              required
            />
          </div>
          <button type="submit" class="btn btn-success">Add User</button>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Edit User Modal -->
<div
  class="modal fade"
  id="editUserModal"
  tabindex="-1"
  aria-labelledby="editUserModalLabel"
>
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editUserModalLabel">Edit User</h5>
      </div>

      <div class="modal-body">
        <form id="editUserForm">
          <input type="hidden" name="userId" />
          <div class="mb-3">
            <label class="form-label">Name</label>
            <input
              type="text"
              class="form-control"
              name="name"
              id="editName"
              autocomplete="name"
              required
            />
          </div>
          <div class="mb-3">
            <label class="form-label">Email</label>
            <input
              type="email"
              class="form-control"
              name="email"
              id="editEmail"
              autocomplete="email"
              required
            />
          </div>
          <div class="mb-3">
            <label class="form-label">Mobile</label>
            <input
              type="text"
              class="form-control"
              name="mobile"
              id="editMobile"
              autocomplete="mobile"
              required
            />
          </div>
          <div class="mb-3">
            <label class="form-label"
              >New Password (leave blank to keep current)</label
            >
            <input
              type="password"
              class="form-control"
              name="password"
              autocomplete="current-password"
              id="editPassword"
            />
          </div>
          <button type="submit" class="btn btn-primary">Save Changes</button>
        </form>
      </div>
    </div>
  </div>
</div>

<script>
  // Function to show alert messages
  function showAlert(message, type = "success") {
    const alertBox = document.createElement("div");
    alertBox.className = `alert alert-${type} alert-dismissible fade show`;
    alertBox.role = "alert";
    alertBox.style = "position:fixed;right:35%;left:35% ";
    alertBox.innerHTML = `${message}`; //<button type="button" class="btn-close" data-bs-dismiss="alert" style="position:fixed" aria-label="Close"></button>
    document.body.prepend(alertBox);

    // Remove alert after 3 seconds
    setTimeout(() => {
      alertBox.remove();
    }, 3000);
  }

  // Add User
  document
    .getElementById("addUserForm")
    .addEventListener("submit", async (e) => {
      e.preventDefault();

      const formData = {
        name: e.target.name.value,
        email: e.target.email.value,
        mobile: e.target.mobile.value,
        password: e.target.password.value,
      };

      try {
        const response = await fetch("/admin/users", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(formData),
        });

        if (response.ok) {
          const newUser = await response.json();
          const userRow = `
              <tr data-user-id="${newUser._id}">
                <td>${newUser.name}</td>
                <td>${newUser.email}</td>
                <td>${newUser.mobile}</td>
                <td>
                  <button class="btn btn-warning btn-sm edit-user-btn" data-user='${JSON.stringify(
                    newUser
                  )}' data-bs-toggle="modal" data-bs-target="#editUserModal">Edit</button>
                  <button class="btn btn-danger btn-sm delete-user-btn" data-user-id="${
                    newUser._id
                  }">Delete</button>
                </td>
              </tr>
            `;

          document
            .getElementById("userTable")
            .insertAdjacentHTML("beforeend", userRow);
          const addUserModal = bootstrap.Modal.getInstance(
            document.getElementById("addUserModal")
          );
          addUserModal.hide();

          e.target.reset();
          showAlert("User added successfully!", "success");
        } else {
          showAlert("Failed to add user", "danger");
        }
      } catch (error) {
        console.error("Error:", error);
        showAlert("An error occurred!", "danger");
      }
    });

  // Delete User
  document.getElementById("userTable").addEventListener("click", async (e) => {
    if (e.target.classList.contains("delete-user-btn")) {
      const userId = e.target.dataset.userId;

      if (!confirm("Are you sure you want to delete this user?")) return;

      try {
        const response = await fetch(`/admin/users/${userId}`, {
          method: "DELETE",
        });

        if (response.ok) {
          e.target.closest("tr").remove();
          showAlert("User deleted successfully!", "success");
        } else {
          showAlert("Failed to delete user", "danger");
        }
      } catch (error) {
        console.error("Error:", error);
        showAlert("An error occurred!", "danger");
      }
    }
  });

  // Edit User Modal Population
  document.getElementById("userTable").addEventListener("click", (e) => {
    if (e.target.classList.contains("edit-user-btn")) {
      const user = JSON.parse(e.target.dataset.user);

      document.getElementById("editName").value = user.name;
      document.getElementById("editEmail").value = user.email;
      document.getElementById("editMobile").value = user.mobile;
      document.querySelector("input[name='userId']").value = user._id;

      new bootstrap.Modal(document.getElementById("editUserModal")).show();
    }
  });

  // Edit User Submission
  document
    .getElementById("editUserForm")
    .addEventListener("submit", async (e) => {
      e.preventDefault();

      const userId = document.querySelector("input[name='userId']").value;
      const formData = {
        name: e.target.name.value,
        email: e.target.email.value,
        mobile: e.target.mobile.value,
        password: e.target.password.value,
      };

      try {
        const response = await fetch(`/admin/users/${userId}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(formData),
        });

        const updatedUser = await response.json();

        if (!updatedUser || !updatedUser._id) {
          showAlert(
            updatedUser.error || "Error updating user. Please try again.",
            "danger"
          );
          return;
        }

        //Updateing the user table row
        const userRow = document.querySelector(
          `#userTable tr[data-user-id="${updatedUser._id}"]`
        );
        if (userRow) {
          userRow.children[0].textContent = updatedUser.name;
          userRow.children[1].textContent = updatedUser.email;
          userRow.children[2].textContent = updatedUser.mobile;
        }

        //close the modal
        const editUserModalElement = document.getElementById("editUserModal");
        const editUserModal = bootstrap.Modal.getInstance(editUserModalElement);
        if (editUserModal) {
          editUserModal.hide();
        }

        setTimeout(() => {
          document.body.classList.remove("modal-open");
          document.querySelector(".modal-backdrop")?.remove(); //for removing the backdrop
        }, 300);
        e.target.reset(); //clearing the form

        showAlert("User updated successfully!", "success");
      } catch (error) {
        console.error("Fetch error:", error);
        showAlert("An error occurred while updating the user!", "danger");
      }
    });

  // Search Function
  document.getElementById("searchInput").addEventListener("input", (e) => {
    const searchTerm = e.target.value.toLowerCase();
    document.querySelectorAll("#userTable tr").forEach((row) => {
      const name = row.children[0].textContent.toLowerCase();
      const email = row.children[1].textContent.toLowerCase();
      row.style.display =
        name.includes(searchTerm) || email.includes(searchTerm) ? "" : "none";
    });
  });
</script>
<%- include("../layouts/footer.ejs") %>
